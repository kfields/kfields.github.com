[{"url": "/", "title": "Kurtis Fields", "description": "Full Stack Web Developer", "content": "Hi there \ud83d\udc4b\nThis is my personal developer blog and testing ground for\nStattik\n: a Python powered, Vue inspired static site generator I wrote.\nEnjoy! :)"}, {"url": "/search", "title": "Search", "description": null, "content": "My Search"}, {"url": "/about", "title": "About", "description": null, "content": "I like coding and jamming :)\nMy favorite activities are\nmaking music\nand writing computer programs"}, {"url": "/contact", "title": "Contact", "description": null, "content": "Contact"}, {"url": "/projects", "title": "Projects", "description": null, "content": "My Projects"}, {"url": "/projects/lemonwreck.html", "title": "lemonwreck", "description": "Lemon + re2c demos", "content": "lemonwreck\nLemon + re2c demos"}, {"url": "/projects/kfields.github.html", "title": "kfields.github.com", "description": "My OctoBlog", "content": "Netlify Deployment\npoetry export -f requirements.txt > requirements.txt"}, {"url": "/projects/robocute.html", "title": "robocute", "description": "My PyWeek #6 entry using Pyglet", "content": "RoboCute\n\ud83e\udd16\nThis is a game I wrote for\nPyWeek #6\nQuick Start\ngit clone https://github.com/kfields/robocute.git\ncd robocute\npoetry shell\npoetry install\npython main.py\nwxPython Integration\nSince there aren't any binary wheels for wxPython,\nI leave this to you, the reader.\nIn short, it takes a long time to build. :(\nUbuntu\nsudo apt install libgtk-3-dev\npip install wxPython\npython mainwx.py"}, {"url": "/projects/decision-tree-workshop.html", "title": "decision-tree-workshop", "description": "Automatically exported from code.google.com/p/decision-tree-workshop", "content": "Decision Tree Workshop - Kurtis Fields, 2012\nGraphical Decision Tree Demo in C# using Linq.\nDirections:\nSelect 'Open File' from the toolbar or file menu.\nNavigate to the Data Directory.\nSelect and open the .TXT file you want to open.\n(weather.TXT, purchase.TXT, labor.TXT, and iris.TXT are good to start with.)\nNext select the 'Build' tab.\nClick the green down arrow to start building the tree.\n(Red X to cancel the build)\nSwitch to the 'Graph' tab and use the slider to zoom in and out.\nCredits:\nID3 code adapted from the article by Christopher Roach at http://onlamp.com/pub/a/python/2006/02/09/ai_decision_trees.html\nTreeVisualization from http://www.codeproject.com/Articles/29518/A-Graph-Tree-Drawing-Control-for-WPF"}, {"url": "/projects/acso.html", "title": "acso", "description": "Ant Colony System Optimization Demo in C#", "content": "Not Found"}, {"url": "/projects/kfields.netlify.html", "title": "kfields.netlify.com", "description": "Personal Developer Blog using Gridsome and Buefy", "content": "KFields\nGridsome\n+\nNetlify CMS\nstarter blog\nCheck out the demo at\nkfields.netlify.com"}, {"url": "/projects/arconaut.html", "title": "arconaut", "description": "NPM package for deploying Node apps to remote servers", "content": "Arconaut\nNPM package for deploying Node apps to remote servers"}, {"url": "/projects/livingclean.netlify.html", "title": "livingclean.netlify.com", "description": "", "content": "Gridful\nGridsome\nContentful\nstarter for creating a blog\nCheck out the demo at\ngridful.netlify.com\nStatic sites are scalable, secure and have very little required maintenance. They come with a drawback though. Not everybody feels good editing files, building a project and uploading it somewhere. This is where Contentful comes into play.\nWith Contentful and Gridsome you can connect your favorite static site generator with an API that provides an easy to use interface for people writing content and automate the publishing using services like\nTravis CI\nor\nNetlify\n.\nFeatures\nSimple content model and structure. Easy to adjust to your needs.\nContentful integration using our Sync API\nUsing our Delivery API.\nResponsive/adaptive images via gridsome-image\nContribution\nThis project is part of\ncontentful-userland\nwhich means that we\u2019re always open to contributions\nand you can be part of userland and shape the project yourself after your first merged pull request\n. You can learn more about how contentful userland is organized by visiting\nour about repository\n.\nRequirements\nTo use this project you have to have a Contentful account. If you don't have one yet you can register at\nwww.contentful.com/sign-up\n.\nGetting started\nInstall\nYarn\n(if you haven't already).\nGet the source code and install dependencies.\n$ git clone git@github.com:kfields/gridful.git\n$ cd gridful\n$ yarn install\n$ gridsome create gridful https://github.com/kfields/gridful\nSet up of the needed content model and create a configuration file\nThis project comes with a Contentful setup command\nyarn run setup\n.\nThis command will ask you for a space ID, and access tokens for the Contentful Management and Delivery API and then import the needed content model into the space you define and write a config file (\n./contentful.json\n).\nyarn run setup\nautomates that for you but if you want to do it yourself rename\n.contentful.json.sample\nto\n.contentful.json\nand add your configuration in this file.\nCrucial Commands\nThis project comes with a few handy commands for linting and code fixing. The most important ones are the ones to develop and ship code. You can find the most important commands below.\nyarn run dev\nRun in the project locally.\nyarn run build\nRun a production build into\n./public\n. The result is ready to be put on any static hosting you prefer.\nyarn run deploy\nRun a production build into\n./public\nand publish the site to GitHub pages.\nyarn run cleanup-repository\nRemoves all dependencies, scripts and data from the installation script.\nRoadmap\nmake the starter completely responsive\ninclude tags\nsupport traced placeholders\nadd i18n\nOther resources\nTutorial video series \"Building a blazing fast website with GridsomeJS and Contentful\" by @Khaledgarbaya"}, {"url": "/projects/gridful.html", "title": "gridful", "description": "Gridsome Contentful Blog Starter", "content": "Gridful\nGridsome\nContentful\nBlog Starter\nCheck out the demo at\ngridful.netlify.com\nDerived from\ngatsby-contentful-starter\nwith gratitude"}, {"url": "/projects/gridlify.html", "title": "gridlify", "description": "Gridsome Netlify CMS Blog Starter", "content": "Gridlify\nGridsome\n+\nNetlify CMS\nstarter blog\nCheck out the demo at\ngridlify.netlify.com"}, {"url": "/blog", "title": "Posts", "description": null, "content": "My Blog"}, {"url": "/blog/helloworld.html", "title": "Hello World", "description": "A developer blog is born", "content": "Hi!\nThis is my new developer blog implemented with\nStattik\n.\nStay tuned ..."}, {"url": "/blog/elixir_on_jammy.html", "title": "Elixir on Jammy", "description": "Install Elixir on Ubuntu 22.04", "content": "https://elixir-lang.org/install.html#gnulinux\nWARNING: It appears that a required development package 'automake' is not installed\nhttps://github.com/asdf-vm/asdf-erlang#before-asdf-install\nsudo apt install -y unzip build-essential autoconf m4 libncurses5-dev\nasdf install erlang 25.0.4\nasdf global erlang 25.0.4\nasdf install elixir 1.14.0-otp-25\nasdf global elixir 1.14.0-otp-25\nelixir -v\nmix local.hex\nmix archive.install hex phx_new\napt-get install inotify-tools"}, {"url": "/blog/pyenv_on_ubuntu_22.html", "title": "Install Pyenv on Ubuntu 22.04", "description": "Install Pyenv on Ubuntu 22.04 the Right Way", "content": "Get the Required Dependencies\nsudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\\nlibncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\nInstall Pyenv\nhttps://github.com/pyenv/pyenv-installer\ncurl https://pyenv.run | bash\nMake sure this is in your\n.bashrc\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv virtualenv-init -)\"\npyenv install 3.10.6"}]